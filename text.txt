Create test: create object (name="myobj", obj_type="cube") create object (name="spherey", obj_type="sphere") save "savefile"
Tree(Token('RULE', 'start'), [Tree(Token('RULE', 'expression'), [Token('__ANON_0', 'create'), Token('THING', 'object'), Tree(Token('RULE', 'params'), [Tree(Token('RULE', 'param'), [Token('VAR', 'name'), Token('EQUALS', '='), Tree(Token('RULE', 'data'), [Tree(Token('RULE', 'prim'), [Token('STRING', '"myobj"')])])]), Tree(Token('RULE', 'param'), [Token('VAR', 'obj_type'), Token('EQUALS', '='), Tree(Token('RULE', 'data'), [Tree(Token('RULE', 'prim'), [Token('STRING', '"cube"')])])])])]), Tree(Token('RULE', 'expression'), [Token('__ANON_0', 'create'), Token('THING', 'object'), Tree(Token('RULE', 'params'), [Tree(Token('RULE', 'param'), [Token('VAR', 'name'), Token('EQUALS', '='), Tree(Token('RULE', 'data'), [Tree(Token('RULE', 'prim'), [Token('STRING', '"spherey"')])])]), Tree(Token('RULE', 'param'), [Token('VAR', 'obj_type'), Token('EQUALS', '='), Tree(Token('RULE', 'data'), [Tree(Token('RULE', 'prim'), [Token('STRING', '"sphere"')])])])])]), Tree(Token('RULE', 'expression'), [Token('__ANON_2', 'save'), Token('STRING', '"savefile"')])])

Operation test: operation transform (target="cube", scale=(-1,-1,-1))
Tree(Token('RULE', 'start'), [Tree(Token('RULE', 'expression'), [Token('__ANON_1', 'operation'), Token('VAR', 'transform'), Tree(Token('RULE', 'params'), [Tree(Token('RULE', 'param'), [Token('VAR', 'target'), Token('EQUALS', '='), Tree(Token('RULE', 'data'), [Tree(Token('RULE', 'prim'), [Token('STRING', '"cube"')])])]), Tree(Token('RULE', 'param'), [Token('VAR', 'scale'), Token('EQUALS', '='), Tree(Token('RULE', 'data'), [Tree(Token('RULE', 'tuple'), [Tree(Token('RULE', 'prim'), [Tree(Token('RULE', 'signed_numeric'), [Token('SIGN', '-'), Tree(Token('RULE', 'numeric'), [Token('INTEGER', '1')])])]), Tree(Token('RULE', 'prim'), [Tree(Token('RULE', 'signed_numeric'), [Token('SIGN', '-'), Tree(Token('RULE', 'numeric'), [Token('INTEGER', '1')])])]), Tree(Token('RULE', 'prim'), [Tree(Token('RULE', 'signed_numeric'), [Token('SIGN', '-'), Tree(Token('RULE', 'numeric'), [Token('INTEGER', '1')])])])])])])])])])

Save test: save "savefile.txt"
Tree(Token('RULE', 'start'), [Tree(Token('RULE', 'expression'), [Token('__ANON_2', 'save'), Token('STRING', '"savefile.txt"')])])

Let with arithmetic test: let x 5 + 3
Tree(Token('RULE', 'start'), [Tree(Token('RULE', 'expression'), [Token('__ANON_3', 'let'), Token('VAR', 'x'), Tree(Token('RULE', 'arithmetic'), [Tree(Token('RULE', 'term'), [Tree(Token('RULE', 'signed_numeric'), [None, Tree(Token('RULE', 'numeric'), [Token('INTEGER', '5')])])]), Token('PLUS', '+'), Tree(Token('RULE', 'term'), [Tree(Token('RULE', 'signed_numeric'), [None, Tree(Token('RULE', 'numeric'), [Token('INTEGER', '3')])])])])])])

Let with input test: let username input("Enter username:")
Tree(Token('RULE', 'start'), [Tree(Token('RULE', 'expression'), [Token('__ANON_3', 'let'), Token('VAR', 'username'), Token('__ANON_4', 'input'), Token('STRING', '"Enter username:"')])])

Complex create test: create object (name="MyObject", position=(1.5, 2.0, 3.0), color="red")
Tree(Token('RULE', 'start'), [Tree(Token('RULE', 'expression'), [Token('__ANON_0', 'create'), Token('THING', 'object'), Tree(Token('RULE', 'params'), [Tree(Token('RULE', 'param'), [Token('VAR', 'name'), Token('EQUALS', '='), Tree(Token('RULE', 'data'), [Tree(Token('RULE', 'prim'), [Token('STRING', '"MyObject"')])])]), Tree(Token('RULE', 'param'), [Token('VAR', 'position'), Token('EQUALS', '='), Tree(Token('RULE', 'data'), [Tree(Token('RULE', 'tuple'), [Tree(Token('RULE', 'prim'), [Tree(Token('RULE', 'signed_numeric'), [None, Tree(Token('RULE', 'numeric'), [Token('FLOAT', '1.5')])])]), Tree(Token('RULE', 'prim'), [Tree(Token('RULE', 'signed_numeric'), [None, Tree(Token('RULE', 'numeric'), [Token('FLOAT', '2.0')])])]), Tree(Token('RULE', 'prim'), [Tree(Token('RULE', 'signed_numeric'), [None, Tree(Token('RULE', 'numeric'), [Token('FLOAT', '3.0')])])])])])]), Tree(Token('RULE', 'param'), [Token('VAR', 'color'), Token('EQUALS', '='), Tree(Token('RULE', 'data'), [Tree(Token('RULE', 'prim'), [Token('STRING', '"red"')])])])])])])

Another operation test: operation scale (factor=2)
Tree(Token('RULE', 'start'), [Tree(Token('RULE', 'expression'), [Token('__ANON_1', 'operation'), Token('VAR', 'scale'), Tree(Token('RULE', 'params'), [Tree(Token('RULE', 'param'), [Token('VAR', 'factor'), Token('EQUALS', '='), Tree(Token('RULE', 'data'), [Tree(Token('RULE', 'prim'), [Tree(Token('RULE', 'signed_numeric'), [None, Tree(Token('RULE', 'numeric'), [Token('INTEGER', '2')])])])])])])])])
